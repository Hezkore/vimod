" ALE - linting and lsp support
Plug 'dense-analysis/ale'

" General settings
let g:ale_enabled = 1
let g:ale_completion_enabled = 1
let g:ale_open_list = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_insert_leave = 1
let g:ale_sign_error = 'E'
let g:ale_sign_warning = 'W'
let g:ale_echo_cursor = 1
let g:ale_set_highlights = 1
let g:ale_set_signs = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_fix_on_save = 0

" Settings that need to be applied after the plugin is loaded
autocmd User VIModPlugSettings call s:plugin_settings()
function! s:plugin_settings()
	set omnifunc=ale#completion#OmniFunc
endfunction

" Function to find an executable in a subfolder
function! FindExecutableInSubfolder(base_path, executable_name)
	if isdirectory(a:base_path)
		let l:dirs = split(glob(a:base_path . '/*'), '\n')
		for l:dir in l:dirs
			if isdirectory(l:dir)
				let l:exe_path = l:dir . '/' . a:executable_name
				if filereadable(l:exe_path)
					return l:exe_path
				endif
			endif
		endfor
	endif
	return ''
endfunction

" Function to check if LSP is installed
let s:not_found_lsp = []
function! CheckLSP(executable, name, language)
	if executable(a:executable) == ''
		" Add to our list of not found LSPs
		call add(s:not_found_lsp, a:language . '(' . a:name . ')')
	endif
endfunction

" Echo the not found LSPs
autocmd VimEnter * if !empty(s:not_found_lsp) | echomsg "Notice! LSPs not found: " . join(s:not_found_lsp, ', ') | endif

" Language specific settings
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_linters = {}

" C
let g:ale_fixers['c'] = ['uncrustify'] | let s:fixer = ''

" GO! Language
let g:ale_go_gopls_use_global = 1
let g:ale_linters['go'] = ['gopls']
if has('win32') || has('win64')
	let g:ale_go_gopls_executable = expand('$USERPROFILE') . '\go\bin\gopls.exe'
else
	let g:ale_go_gopls_executable = expand('$HOME') . '/go/bin/gopls'
endif
call CheckLSP(g:ale_go_gopls_executable, 'gopls', 'Go')
let g:ale_fixers['go'] = ['gofmt']

" Nim
let g:ale_linters['nim'] = ['nimlsp', 'nimcheck']
let g:ale_nim_nimlsp_executable = 'nimlsp'
call CheckLSP(g:ale_nim_nimlsp_executable, 'nimlsp', 'Nim')
let g:ale_fixers['nim'] = ['nimpretty']

" Zig
let g:ale_linters['zig'] = ['zls']
let g:ale_zig_zls_executable = 'zls'
call CheckLSP(g:ale_zig_zls_executable, 'zls', 'Zig')
let g:ale_fixers['zig'] = ['zigfmt']

" D Language
let g:ale_linters['d'] = ['dls', 'dmd']
if has('win32') || has('win64')
    let g:ale_d_dls_executable = FindExecutableInSubfolder(expand('$USERPROFILE') . '\AppData\Local\dub\packages\serve-d', 'serve-d\serve-d.exe')
else
    let g:ale_d_dls_executable = FindExecutableInSubfolder(expand('$HOME') . '/.dub/packages/serve-d', 'serve-d/serve-d')
endif
call CheckLSP(g:ale_d_dls_executable, 'dls(serv-d)', 'D')

if has('win32') || has('win64')
	let s:fixer = FindExecutableInSubfolder(expand('$USERPROFILE') . '\AppData\Local\dub\packages\dfmt', 'dfmt\bin\dfmt.exe')
else
	let s:fixer = FindExecutableInSubfolder(expand('$HOME') . '/.dub/packages/dfmt', 'dfmt/bin/dfmt')
endif
let g:ale_fixers['d'] = [s:fixer] | let s:fixer = ''

" --- untested ---

" Python - untested
let g:ale_linters['python'] = ['pylint']
let g:ale_python_pylint_executable = 'pylint'
call CheckLSP(g:ale_python_pylint_executable, 'pylint', 'Python')

" JavaScript - untested
let g:ale_linters['javascript'] = ['eslint']
let g:ale_javascript_eslint_executable = 'eslint'
call CheckLSP(g:ale_javascript_eslint_executable, 'eslint', 'JavaScript')

" TypeScript - untested
let g:ale_linters['typescript'] = ['tsserver']
let g:ale_typescript_tsserver_executable = 'typescript-language-server'
call CheckLSP(g:ale_typescript_tsserver_executable, 'typescript-language-server', 'TypeScript')

" HTML - untested
let g:ale_linters['html'] = ['htmlhint']
let g:ale_html_htmlhint_executable = 'htmlhint'
call CheckLSP(g:ale_html_htmlhint_executable, 'htmlhint', 'HTML')

" CSS - untested
let g:ale_linters['css'] = ['stylelint']
let g:ale_css_stylelint_executable = 'stylelint'
call CheckLSP(g:ale_css_stylelint_executable, 'stylelint', 'CSS')

" PHP - untested
let g:ale_linters['php'] = ['phpcs']
let g:ale_php_phpcs_executable = 'phpcs'
call CheckLSP(g:ale_php_phpcs_executable, 'phpcs', 'PHP')

" Ruby - untested
let g:ale_linters['ruby'] = ['rubocop']
let g:ale_ruby_rubocop_executable = 'rubocop'
call CheckLSP(g:ale_ruby_rubocop_executable, 'rubocop', 'Ruby')

" C/C++ - untested
let g:ale_linters['c'] = ['clangd']
let g:ale_linters['cpp'] = ['clangd']
let g:ale_c_clangd_executable = 'clangd'
let g:ale_cpp_clangd_executable = 'clangd'
call CheckLSP(g:ale_c_clangd_executable, 'clangd', 'C')
call CheckLSP(g:ale_cpp_clangd_executable, 'clangd', 'C++')

" Java - untested
let g:ale_linters['java'] = ['jdtls']
let g:ale_java_jdtls_executable = 'jdtls'
call CheckLSP(g:ale_java_jdtls_executable, 'jdtls', 'Java')

" Rust - untested
let g:ale_linters['rust'] = ['rls']
let g:ale_rust_rls_executable = 'rls'
call CheckLSP(g:ale_rust_rls_executable, 'rls', 'Rust')

" Lua - untested
let g:ale_linters['lua'] = ['lua-language-server']
let g:ale_lua_lua_language_server_executable = 'lua-language-server'
call CheckLSP(g:ale_lua_lua_language_server_executable, 'lua-language-server', 'Lua')

" Shell - untested
let g:ale_linters['sh'] = ['shellcheck']
let g:ale_sh_shellcheck_executable = 'shellcheck'
call CheckLSP(g:ale_sh_shellcheck_executable, 'shellcheck', 'Shell')

